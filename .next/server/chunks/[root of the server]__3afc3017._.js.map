{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":["file:///Users/jorgeguzman/Desktop/nextjs-projects/jorge-portfolio/src/lib/db.js"],"sourcesContent":["import { Pool } from 'pg';\n\nconst pool = new Pool ({\n    connectionString: process.env.DATABASE_URL,\n})\n\nexport default pool;"],"names":[],"mappings":";;;AAAA;;;;;;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAE;IACnB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAC9C;uCAEe","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":["file:///Users/jorgeguzman/Desktop/nextjs-projects/jorge-portfolio/src/app/api/contact/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport nodemailer from 'nodemailer';\nimport { Parser } from 'json2csv';\nimport pool from \"@/lib/db\";\n\n\nexport const POST = async (request) => {\n\n  \n    try {\n        const body = await request.json();\n        const {email, name, comment} = body;\n\n        const result = await pool.query(\n            \"INSERT INTO contact_info (email, name, comment) VALUES ($1, $2, $3) RETURNING *\",\n            [email, name, comment]\n        );\n        return NextResponse.json(result.rows[0]);\n    } catch (err) {\n        console.log(err);\n        return NextResponse.json({mesage: \"Server Error\"}, {status: 500});\n    }\n}\n  \n\nexport const GET = async () => {\n  try {\n    const result = await pool.query(\"SELECT * FROM contact_info\");\n    const parser = new Parser();\n    const csv = parser.parse(result.rows);\n\n    const transporter = nodemailer.createTransport({\n      service: \"gmail\",\n      auth: {\n        user: process.env.EMAIL_USER,\n        pass: process.env.EMAIL_PASS,\n      },\n    });\n\n    console.log(\"Preparing to send email with:\", {\n      user: process.env.EMAIL_USER,\n      pass: process.env.EMAIL_PASS,\n      rows: result.rows.length,\n    });\n\n      await transporter.sendMail({\n      from: process.env.EMAIL_USER,\n      to: process.env.EMAIL_USER, // send to yourself\n      subject: \"Contact Info CSV\",\n      text: \"Attached is the contact_info table in CSV format.\",\n      attachments: [\n        {\n          filename: \"contact_info.csv\",\n          content: csv,\n        },\n      ],\n    });\n\n   \n\n    return NextResponse.json({ message: \"Email sent successfully\" });\n  } catch (err) {\n    console.log(\"Email send failed:\", err);\n    return NextResponse.json(\n      { error: \"Failed to send email\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;;;;AAGO,MAAM,OAAO,OAAO;IAGvB,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAC,GAAG;QAE/B,MAAM,SAAS,MAAM,kHAAA,CAAA,UAAI,CAAC,KAAK,CAC3B,mFACA;YAAC;YAAO;YAAM;SAAQ;QAE1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,EAAE;IAC3C,EAAE,OAAO,KAAK;QACV,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,QAAQ;QAAc,GAAG;YAAC,QAAQ;QAAG;IACnE;AACJ;AAGO,MAAM,MAAM;IACjB,IAAI;QACF,MAAM,SAAS,MAAM,kHAAA,CAAA,UAAI,CAAC,KAAK,CAAC;QAChC,MAAM,SAAS,IAAI,6IAAA,CAAA,SAAM;QACzB,MAAM,MAAM,OAAO,KAAK,CAAC,OAAO,IAAI;QAEpC,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;YAC7C,SAAS;YACT,MAAM;gBACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;gBAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC9B;QACF;QAEA,QAAQ,GAAG,CAAC,iCAAiC;YAC3C,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,MAAM,OAAO,IAAI,CAAC,MAAM;QAC1B;QAEE,MAAM,YAAY,QAAQ,CAAC;YAC3B,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,IAAI,QAAQ,GAAG,CAAC,UAAU;YAC1B,SAAS;YACT,MAAM;YACN,aAAa;gBACX;oBACE,UAAU;oBACV,SAAS;gBACX;aACD;QACH;QAIA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B;IAChE,EAAE,OAAO,KAAK;QACZ,QAAQ,GAAG,CAAC,sBAAsB;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}